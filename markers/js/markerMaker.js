// Generated by CoffeeScript 1.3.3
(function() {
  var Slider, d, getMarker, init, withContext;

  init = function() {
    var canvas, ctx, id, redraw, size;
    id = new Slider('id');
    size = new Slider('size');
    canvas = document.querySelector('canvas');
    ctx = canvas.getContext('2d');
    redraw = function() {
      var marker, unit, x, y, _i, _results;
      canvas.setAttribute('width', size.value);
      canvas.setAttribute('height', size.value);
      marker = getMarker(id.value);
      ctx.fillStyle = 'black';
      ctx.fillRect(0, 0, size.value, size.value);
      ctx.fillStyle = 'white';
      unit = size.value / 7;
      _results = [];
      for (y = _i = 0; _i <= 4; y = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (x = _j = 0; _j <= 4; x = ++_j) {
            if (marker[y][x]) {
              _results1.push(ctx.fillRect(unit + unit * x, unit + unit * y, unit, unit));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    id.onUpdate = redraw;
    size.onUpdate = redraw;
    return redraw();
  };

  getMarker = function(id) {
    var i, out, slice, _i;
    id = parseInt(id);
    id = ('0000000000' + id.toString(2)).slice(-10);
    out = [];
    for (i = _i = 0; _i <= 4; i = ++_i) {
      slice = id.slice(i * 2, (i + 1) * 2);
      console.log(slice);
      switch (slice) {
        case '00':
          out.push([1, 0, 0, 0, 0]);
          break;
        case '01':
          out.push([1, 0, 1, 1, 1]);
          break;
        case '10':
          out.push([0, 1, 0, 0, 1]);
          break;
        case '11':
          out.push([0, 1, 1, 1, 0]);
      }
    }
    return out;
  };

  Slider = (function() {

    function Slider(id) {
      this.id = id;
      this.rangeEl = document.getElementById(this.id);
      this.numEl = document.getElementById(this.id + '-txt');
      this.copyAttr('min');
      this.copyAttr('max');
      this.copyAttr('value');
      this.copyAttr('step');
      this.rangeEl.addEventListener('change', withContext(this.changeFromRange, this), false);
      this.numEl.addEventListener('change', withContext(this.changeFromNum, this), false);
      this.numEl.addEventListener('click', withContext(this.changeFromNum, this), false);
      this.update();
    }

    Slider.prototype.update = function() {
      this.value = this.rangeEl.value;
      return this.onUpdate();
    };

    Slider.prototype.onUpdate = function() {
      return null;
    };

    Slider.prototype.changeFromRange = function(e, context) {
      context.numEl.value = context.rangeEl.value;
      return context.update();
    };

    Slider.prototype.changeFromNum = function(e, context) {
      context.rangeEl.value = context.numEl.value;
      return context.update();
    };

    Slider.prototype.copyAttr = function(attr) {
      return this.numEl.setAttribute(attr, this.rangeEl.getAttribute(attr));
    };

    return Slider;

  })();

  withContext = function(handler, context) {
    return function(e) {
      return handler(e, context);
    };
  };

  d = {};

  document.addEventListener('DOMContentLoaded', init, false);

}).call(this);
